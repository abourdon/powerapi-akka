{"body":"# PowerAPI\r\n\r\nPowerAPI is a scala-based library for monitoring energy at the process-level. It is based on a modular and asynchronous event-driven architecture using the [Akka library](http://akka.io \"Akka library\").\r\n\r\nPowerAPI differs from existing energy process-level monitoring tool in its pure software, fully customizable and modular aspect which let user to precisely define what he wants to monitor, without any external device.\r\n\r\nPowerAPI offers an API which can be used to express request about energy spent by a process, following its hardware resource utilization (in term of CPU, memory, disk, network, etc.).\r\n\r\n## Documentation\r\n* [Getting started](#getting-started)\r\n* [Architecture details](#architecture-details)\r\n* [API details](#api-details)\r\n* [Future works](#future-works)\r\n* [License](#license)\r\n\r\n<h2 id=\"getting-started\">Getting started</h2>\r\n\r\nPowerAPI is completely written in [Scala](http://www.scala-lang.org \"Scala language\") (v. 2.9.1+), using the [Akka library](http://akka.io \"Akka library\") (v 2.0.1+). Configuration part is managed by the [Typesafe Config](https://github.com/typesafehub/config \"Typesafe Config\") (integrated version from the [Akka library](http://akka.io \"Akka library\")).\r\nPowerAPI project is fully managed by [Maven](http://maven.apache.org \"Maven\") (v. 3).\r\n\r\n### How to acquire it\r\n\r\nThere are two ways to acquire PowerAPI: With or without Maven repositories. In other words, directly from Maven repositories (to get stable or snapshot versions), or from our Git repository (to get the source code).\r\n\r\n#### With Maven repositories\r\n\r\n**Stable versions** are available from the [Maven central repository](http://search.maven.org \"Maven central repository\"). Thus, you just have to put on your `pom.xml` file your desired modules. That's all.\r\n\r\n**Snapshot versions** are available from the [OSS Sonatype repository](https://oss.sonatype.org \"OSS Sonatype repository\"). Thus, you have to add this following repository location:\r\n\r\n```xml\r\n<repository>\r\n    <id>OSS Sonatype snapshot repository</id>\r\n\t<url>https://oss.sonatype.org/content/repositories/snapshots</url>\r\n\t<snapshots>\r\n\t\t<enabled>true</enabled>\r\n\t</snapshots>\r\n</repository>\r\n```\r\n\r\nAfter that, you just have to put on your `pom.xml` file your desired modules.\r\n\r\n#### Without Maven repositories\r\n\r\nWithout Maven repositories, you have to deal with our Git repository as explain bellow:\r\n\r\nTo acquire PowerAPI, simply clone it via your Git client:\r\n\r\n```bash\r\ngit clone git://github.com/abourdon/powerapi-akka.git\r\n```\r\n\r\nAs PowerAPI is a [Maven](http://maven.apache.org \"Maven\") managed project, you have to launch the `install` command at the root directory (here, `powerapi_akka_directory`) in order to compile and install it to your local machine:\r\n\r\n```bash\r\ncd $powerapi_akka_directory\r\nmvn install\r\n```\r\n\r\n**By default, all modules are selected to be installed. Be careful to correctly selecting yours, depending on your environment and the use case you want to do** (see `pom.xml` file at the root directory for more details).\r\n\r\n### How to use it\r\n\r\nIn the way you acquire PowerAPI from [Maven](http://maven.apache.org \"Maven\") repositories, you can directly use it as a _Jar project_ in your `pom.xml` file.\r\n\r\nIn the way you acquire PowerAPI from our Git repository, you can navigate to your desired module and use it as a standard [Maven](http://maven.apache.org \"Maven\") module:\r\n\r\n```bash\r\ncd $powerapi_akka_directory/sensors/sensor-cpu-api\r\nmvn test\r\n```\r\n\r\n### How to configure it\r\n\r\nAs said above, configuration part is managed by the [Typesafe Config](https://github.com/typesafehub/config \"Typesafe Config\"). Thus, be aware to properly configure each module from its `.conf` file(s).\r\n\r\nLet's take an example for the `fr.inria.powerapi.formula.formula-cpu-dvfs` module, which implements the PowerAPI CPU `Formula` using the [well-known formula](http://en.wikipedia.org/wiki/CMOS \"CPU power formula\"), `P = c * f * V * V`, where `c` constant, `f` a frequency and `V` its associated voltage.\r\n\r\nTo compute this formula, `fr.inria.powerapi.formula.formula-cpu-dvfs` module has to know:\r\n* the CPU [Thermal Design Power](http://en.wikipedia.org/wiki/Thermal_design_power \"Thermal Design Power\") value;\r\n* the array of frequency/voltage used by the CPU.\r\n\r\nThis information can be written in its associated configuration file as the following:\r\n\r\n```\r\npowerapi {\r\n\tcpu {\r\n\t\ttdp = 105\r\n\t\tfrequencies = [\r\n\t\t\t{ value = 1800002, voltage = 1.31 }\r\n\t\t\t{ value = 2100002, voltage = 1.41 }\r\n\t\t\t{ value = 2400003, voltage = 1.5 }\r\n\t\t]\r\n\t}\r\n}\r\n```\r\n\r\nEach module can have its own configuration part. See more details in its associated `README` file.\r\n\r\n<h2 id=\"architecture-details\">Architecture details</h2>\r\n\r\nPowerAPI is based on a modular and asynchronous event-driven architecture using the [Akka library](http://akka.io \"Akka library\"). Architecture is centralized around a common [event bus](http://en.wikipedia.org/wiki/Event_monitoring \"Event monitoring\") where each module can publish/subscribe to sending events. One particularity of this architecture is that each module is in passive state and reacts to events sent by the common event bus.\r\n\r\nThese modules are organized as follow:\r\n\r\n### Core\r\n\r\nAs its name indicates, `Core` module gather all *kernel* functionnalities that will be used by other modules. More particulary, this module defines the whole types used by PowerAPI to define its architecture.\r\n\r\nThis module also defines the essential `Clock` class, responsible of the periodically sending of the `Tick` message, later responsible of the process of the PowerAPI business part.\r\n\r\n### Sensors\r\n\r\nTo compute energy spent by a process through its hardware resource utilization, PowerAPI cuts computation in two parts:\r\n1. Hardware resource process utilization monitoring;\r\n2. Computation of the energy implies by the hardware resource process utilization.\r\n\r\nSensor modules or _Sensors_ represents a set of `Sensor`, responsible of the monitoring of hardware resource process utilization. Thus, there is a CPU `Sensor`, a memory `Sensor`, a disk `Sensor` and so on.\r\nAs information is given by operating system, there is one `Sensor` implementation by operating system type. Thus there is a CPU Linux `Sensor`, a CPU Windows `Sensor`, and so on.\r\n\r\n### Formulae\r\n\r\nSet of `Formula`, responsible of the computation of the energy spent by a process on a particular hardware resource (e.g CPU, memory, disk, network), following information provided by its associated `Sensor`.\r\nA `Formula` may depend on the type of the monitored hardware resource. Thus, for the same hardware resource, several `Formula` implementations could exist.\r\n\r\n### Listeners\r\n\r\nSet of `Listener`, which listen `Formula` events sending by the common event bus. A `Listener` define the actions to do when receiving results from the energy computation (e.g displaying information or producing and submitting information to the common event bus).\r\n\r\n### Library\r\n\r\nThe Library module defines the API that can be used by user to interact with PowerAPI.\r\n\r\n<h2 id=\"api-details\">API details</h2>\r\n\r\nProcess-level energy monitoring is based on a periodically computation that can be expressed via the API. Here there are several examples to describe PowerAPI's API:\r\n\r\n### What is the CPU energy spent by the 123 process? Please give me fresh results every 500 milliseconds\r\n\r\nAssume that process run under Linux, using a [procfs](http://en.wikipedia.org/wiki/Procfs \"Procfs\") file system on a _standard_ CPU architecture.\r\nThus, we need to use the _procfs_ CPU `Sensor` implementation and a given CPU `Formula` implementation, let's say the [DVFS](http://en.wikipedia.org/wiki/Voltage_and_frequency_scaling \"DVFS\") version. Add to this the desire to display CPU energy spent by process into a console. So we need to:\r\n\r\n1. Activate the desired modules:\r\n\r\n```scala\r\nArray(\r\n    classOf[fr.inria.powerapi.sensor.cpu.proc.CpuSensor],\r\n    classOf[fr.inria.powerapi.formula.cpu.dvfs.CpuFormula]\r\n).foreach(PowerAPI.startEnergyModule(_))\r\n```\r\n\r\n2. Ask to PowerAPI to provide the CPU energy spent by the 123 process, every 500 milliseconds, using a _console Listener_:\r\n\r\n```scala\r\nPowerAPI.startMonitoring(\r\n    Process(123),\r\n    500 milliseconds,\r\n    classOf[fr.inria.powerapi.listener.cpu.console.CpuListener]\r\n)\r\n```\r\n\r\n### Based on the first request, how can I display CPU energy information into a chart too?\r\n\r\nBased on the previous code, we simply have to add a new `Listener` which will be able to display CPU energy information into a chart.\r\nPowerAPI integrates a `Listener` using the [JFreeChart](http://www.jfree.org/jfreechart \"JFreeChart\") Java graph library. So let's add it to the PowerAPI system:\r\n\r\n```scala\r\nPowerAPI.startMonitoring(\r\n    listener = classOf[fr.inria.powerapi.listener.cpu.jfreechart.CpuListener]\r\n)\r\n```\r\n\r\nThat's all!\r\n\r\n<h2 id=\"future-works\">Future works</h2>\r\n\r\nWe are working on new _energy modules_ (`Sensor` + `Formula`) development. If you are interested to participate, feel free to contact us via our [GitHub](https://github.com/abourdon/powerapi-akka \"GitHub\") webpage or mail us at powerapi-user-list@googlegroups.com!\r\n\r\n<h2 id=\"license\">License</h2>\r\n\r\nCopyright (C) 2012 Inria, University Lille 1.\r\n\r\nPowerAPI is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Affero General Public License as\r\npublished by the Free Software Foundation, either version 3 of the\r\nLicense, or (at your option) any later version.\r\n\r\nPowerAPI is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU Affero General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Affero General Public License\r\nalong with PowerAPI. If not, see <http://www.gnu.org/licenses/>.\r\n","name":"PowerAPI","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Library API to monitor energy spent at the process-level"}